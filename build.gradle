group = 'de.flapdoodle.embedmongo'
version = '1.50.1-SNAPSHOT'

project.ext.gradleVersion = "2.4"

apply plugin: 'java'
apply plugin: 'eclipse'
repositories { mavenCentral() }
eclipse {

    jdt {
        //if you want to alter the java versions (by default they are configured with gradle java plugin settings):
        sourceCompatibility = JavaVersion.VERSION_1_6
        targetCompatibility = JavaVersion.VERSION_1_6
    }
    classpath {
        //customizing the classes output directory:
        defaultOutputDir = file('build-eclipse')
    }
}

dependencies {

    compile 'commons-io:commons-io:2.4'
    compile 'de.flapdoodle.embed:de.flapdoodle.embed.process:1.50.1'
    compile 'org.mongodb:mongo-java-driver:3.0.2'
    compile 'org.slf4j:slf4j-api:1.7.12'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.0'
    testCompile 'org.mortbay.jetty:jetty:6.1.25'
    testCompile 'com.google.guava:guava:18.0'
    testCompile 'org.slf4j:slf4j-simple:1.7.12'
}

task wrapper(type: Wrapper) {
    gradleVersion = project.ext.gradleVersion
}

// we reset the last modified date of all test result files
// for incremental builds which don't run the tests when no
// chage has been made. otherwise jenkins will throw an exception then caused by
// old test result files
task jenkinsTest {
    inputs.files test.outputs.files
    doLast {
        def timestamp = System.currentTimeMillis()
        if (test.testResultsDir.exists())
            test.testResultsDir.eachFile { it.lastModified = timestamp }
    }
}

build.dependsOn(jenkinsTest)

test {

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = false

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    //onOutput { descriptor, event ->
    //    logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    //}
}
