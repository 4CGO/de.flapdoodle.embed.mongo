{"name":"Embedmongo.flapdoodle.de","body":"# Organisation Flapdoodle OSS\r\n\r\nWe are now a github organisation. You are invited to participate. :)\r\n\r\n# Embedded MongoDB\r\n\r\nEmbedded MongoDB will provide a platform neutral way for running mongodb in unittests.\r\n\r\n## Why?\r\n\r\n- dropping databases causing some pains (often you have to wait long time after each test)\r\n- its easy, much easier as installing right version by hand\r\n- you can change version per test\r\n\r\n## Dependencies\r\n\r\n### Build on top of\r\n\r\n- Embed Process Util [de.flapdoodle.embed.process](https://github.com/flapdoodle-oss/de.flapdoodle.embed.process)\r\n\r\n### Other ways to use Embedded MongoDB\r\n\r\n- In a Maven build using [embedmongo-maven-plugin](https://github.com/joelittlejohn/embedmongo-maven-plugin)\r\n- In a Clojure/Leiningen project using [lein-embongo](https://github.com/joelittlejohn/lein-embongo)\r\n- In a Scala/specs2 specification using [specs2-embedmongo](https://github.com/athieriot/specs2-embedmongo)\r\n\r\n### Comments about Embedded MongoDB in the Wild\r\n\r\nhttp://stackoverflow.com/questions/6437226/embedded-mongodb-when-running-integration-tests\r\nhttp://www.cubeia.com/index.php/blog/archives/436\r\n\r\n### Other MongoDB Stuff\r\n\r\n- https://github.com/thiloplanz/jmockmongo - mongodb mocking\r\n- https://github.com/lordofthejars/nosql-unit - extended nosql unit testing\r\n\r\n## Howto\r\n\r\n### Maven\r\n\r\n**IMPORTANT NOTE: maven groupId and artifactId change**\r\n\r\n*\tgroupId from __de.flapdoodle.embedmongo__ to __de.flapdoodle.embed__\r\n*\tartifactId from __de.flapdoodle.embedmongo__ to __de.flapdoodle.embed.mongo__\r\n\r\nStable (Maven Central Repository, Released: 16.12.2012 - wait 24hrs for [maven central](http://repo1.maven.org/maven2/de/flapdoodle/embed/de.flapdoodle.embed.mongo/maven-metadata.xml))\r\n\r\n\t<dependency>\r\n\t\t<groupId>de.flapdoodle.embed</groupId>\r\n\t\t<artifactId>de.flapdoodle.embed.mongo</artifactId>\r\n\t\t<version>1.28</version>\r\n\t</dependency>\r\n\r\nSnapshots (Repository http://oss.sonatype.org/content/repositories/snapshots)\r\n\r\n\t<dependency>\r\n\t\t<groupId>de.flapdoodle.embed</groupId>\r\n\t\t<artifactId>de.flapdoodle.embed.mongo</artifactId>\r\n\t\t<version>1.29-SNAPSHOT</version>\r\n\t</dependency>\r\n\r\n\r\n### Build from source\r\n\r\nWhen you fork or clone our branch you should always be able to build the library by running \r\n\r\n\tmvn package\r\n\r\nThere is also a build.gradle file available which might sometimes be outdated but we try to keep it working. So the gradle command is\r\n\r\n\tgradle build\r\n\r\nOr if you want to use the gradle wrapper:\r\n\r\n\t./gradlew build\r\n \r\n\r\n### Changelog\r\n\r\n#### 1.29 (SNAPSHOT)\r\n\r\n\r\n\r\n#### 1.28\r\n\r\n- mongod config refactor\r\n- configurable startup timeout\r\n- added windows2008 support\r\n\r\n#### 1.27\r\n\r\n- dep version change\r\n\r\n#### 1.26\r\n\r\n- bind_ip configuration parameter support (MongodConfig constructor)\r\n\r\n#### 1.25\r\n\r\n- dep version change\r\n\r\n#### 1.24\r\n\r\n- dep version change\r\n\r\n#### 1.23\r\n\r\n- added 2.0.7, 2.2.0\r\n- mongodb java driver update to 2.9.0 (test dependency)\r\n\r\n#### 1.22\r\n\r\n- maven dep version range does not work as expected -> disabled\r\n\r\n#### 1.21\r\n\r\n- dependency version range for de.flapdoodle.embed.process\r\n\r\n#### 1.20\r\n\r\n- NPE fix with custom database directory\r\n- custom database directory will not be deleted\r\n\r\n#### 1.19\r\n\r\n- **massive refactoring, some api breaks**\r\n- **project split**\r\n- some relevant process.stop() improvements\r\n\r\n#### 1.18\r\n\r\n- added some unit test support (thanx to trajano)\r\n- added some logging only runtime config option\r\n- added 2.0.7-rc1, 2.2.0-rc0\r\n- command line post processor hock\r\n\r\n#### 1.17\r\n\r\n- added version 2.0.6 and 2.1.2\r\n- version refactoring\r\n- you can now have a custom version, so you do not depend on a new release of this project\r\n\r\n#### 1.16\r\n\r\n- added version 2.0.5 (main version 2.0 now points to it)\r\n- changed http user agent\r\n- customizeable mongod process output \r\n- better loopback device detection for mongod process shutdown via command\r\n\r\n#### 1.15\r\n\r\n- now we send ctrl+c on linux and osx, then send shutdown to server, then taskkill on windows (may the force be with us)\r\n- disable journal for faster turnaround times\r\n- noauth added\r\n- customize artifact storage path\r\n- detection if localhost is not loopback (command shutdown on mongod does not work for remote access)\r\n- formated process output\r\n- much better windows support\r\n\r\n#### 1.14\r\n\r\n- changed back to send ctrl+c and then send shutdown\r\n\r\n#### 1.13\r\n\r\n- mongod process management improvement \r\n (windows mongod shutdown improvement (alpha) (some trouble stopping process on windows - http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4770092))\r\n - send shutdown to server\r\n - send ctrl+c to mongod will perform clean shutdown (untested on windows using taskkill)\r\n- now with 2.1.1\r\n\r\n#### 1.12\r\n\r\n- NUMA support (alpha) - http://www.mongodb.org/display/DOCS/NUMA\r\n\r\n#### 1.11\r\n\r\n- timeout fix on slow systems\r\n- stability on win plattforms (hopefully)\r\n\r\n#### 1.10\r\n\r\n- race condition and cleanup of mongod process\r\n\r\n#### 1.9\r\n\r\n- fixed 64Bit detection - amd64\r\n- now with main versions 1.6, 1.8, 2.0, 2.1\r\n\r\n### Supported Versions\r\n\r\nVersions: some older, 1.8.5, 1.9.0, 2.0.6, 2.1.2\r\nSupport for Linux, Windows and MacOSX.\r\n\r\n### Usage\r\n\r\n\tint port = 12345;\r\n\tMongodConfig mongodConfig = new MongodConfig(Version.Main.V2_0, port, Network.localhostIsIPv6());\r\n\r\n\tMongodStarter runtime = MongodStarter.getDefaultInstance();\r\n\r\n\tMongodExecutable mongodExecutable = null; \r\n\ttry {\r\n\t\tmongodExecutable = runtime.prepare(mongodConfig);\r\n\t\tMongodProcess mongod = mongodExecutable.start();\r\n\r\n\t\tMongo mongo = new Mongo(\"localhost\", port);\r\n\t\tDB db = mongo.getDB(\"test\");\r\n\t\tDBCollection col = db.createCollection(\"testCol\", new BasicDBObject());\r\n\t\tcol.save(new BasicDBObject(\"testDoc\", new Date()));\r\n\r\n\t} finally {\r\n\t\tif (mongodExecutable != null)\r\n\t\t\tmongodExecutable.stop();\r\n\t}\r\n\r\n### Usage - custom mongod filename \r\n\r\n\tint port = 12345;\r\n\tMongodConfig mongodConfig = new MongodConfig(Version.Main.V2_0, port, Network.localhostIsIPv6());\r\n\r\n\tRuntimeConfig runtimeConfig = new RuntimeConfig();\r\n\truntimeConfig.setExecutableNaming(new UserTempNaming());\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\r\n\tMongodExecutable mongodExecutable=null;\r\n\ttry {\r\n\t\tmongodExecutable = runtime.prepare(mongodConfig);\r\n\t\tMongodProcess mongod = mongodExecutable.start();\r\n\r\n\t\tMongo mongo = new Mongo(\"localhost\", port);\r\n\t\tDB db = mongo.getDB(\"test\");\r\n\t\tDBCollection col = db.createCollection(\"testCol\", new BasicDBObject());\r\n\t\tcol.save(new BasicDBObject(\"testDoc\", new Date()));\r\n\r\n\t} finally {\r\n\t\tif (mongodExecutable != null)\r\n\t\t\tmongodExecutable.stop();\r\n\t}\r\n\r\n### Unit Tests\r\n\r\n\tpublic abstract class AbstractMongoDBTest extends TestCase {\r\n\r\n\t\tprivate MongodExecutable _mongodExe;\r\n\t\tprivate MongodProcess _mongod;\r\n\r\n\t\tprivate Mongo _mongo;\r\n\t\t@Override\r\n\t\tprotected void setUp() throws Exception {\r\n\r\n\t\t\tMongodStarter runtime = MongodStarter.getDefaultInstance();\r\n\t\t\t_mongodExe = runtime.prepare(new MongodConfig(Version.Main.V2_0, 12345, Network.localhostIsIPv6()));\r\n\t\t\t_mongod = _mongodExe.start();\r\n\r\n\t\t\tsuper.setUp();\r\n\r\n\t\t\t_mongo = new Mongo(\"localhost\", 12345);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void tearDown() throws Exception {\r\n\t\t\tsuper.tearDown();\r\n\r\n\t\t\t_mongod.stop();\r\n\t\t\t_mongodExe.stop();\r\n\t\t}\r\n\r\n\t\tpublic Mongo getMongo() {\r\n\t\t\treturn _mongo;\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n#### ... with some more help\r\n\r\n\t...\r\n\tMongodForTestsFactory factory = null;\r\n\ttry {\r\n\t\tfactory = MongodForTestsFactory.with(Version.Main.V2_0);\r\n\r\n\t\tMongo mongo = factory.newMongo();\r\n\t\tDB db = mongo.getDB(\"test-\" + UUID.randomUUID());\r\n\t\tDBCollection col = db.createCollection(\"testCol\", new BasicDBObject());\r\n\t\tcol.save(new BasicDBObject(\"testDoc\", new Date()));\r\n\r\n\t} finally {\r\n\t\tif (factory != null)\r\n\t\t\tfactory.shutdown();\r\n\t}\r\n\t...\r\n\r\n\r\n### Customize Artifact Storage\r\n\r\n\t...\r\n\tIArtifactStoragePathNaming artifactStorePath = ...\r\n\tITempNaming executableNaming = ...\r\n\t\t\r\n\tRuntimeConfig runtimeConfig = new RuntimeConfig();\r\n\truntimeConfig.getDownloadConfig().setArtifactStorePathNaming(artifactStorePath);\r\n\truntimeConfig.setExecutableNaming(executableNaming);\r\n\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\tMongodExecutable mongodExe = runtime.prepare(mongodConfig);\r\n\t...\r\n\r\n### Usage - custom mongod process output \r\n\r\n#### ... to console with line prefix\r\n\t...\r\n\tRuntimeConfig runtimeConfig = new RuntimeConfig();\r\n\truntimeConfig.setProcessOutput(new ProcessOutput(Processors.namedConsole(\"[mongod>]\"),\r\n\t\tProcessors.namedConsole(\"[MONGOD>]\"), Processors.namedConsole(\"[console>]\")));\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\t...\r\n\r\n#### ... to file\r\n\t...\r\n\tRuntimeConfig runtimeConfig=new RuntimeConfig();\r\n\tIStreamProcessor mongodOutput = Processors.named(\"[mongod>]\", new FileStreamProcessor(File.createTempFile(\"mongod\", \"log\")));\r\n\tIStreamProcessor mongodError = new FileStreamProcessor(File.createTempFile(\"mongod-error\", \"log\"));\r\n\tIStreamProcessor commandsOutput = Processors.namedConsole(\"[console>]\");\r\n\t\t\r\n\truntimeConfig.setProcessOutput(new ProcessOutput(mongodOutput,\r\n\t\tmongodError, commandsOutput));\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\t...\r\n\t\r\n\t...\r\n\tpublic class FileStreamProcessor implements IStreamProcessor {\r\n\t\r\n\t\tprivate FileOutputStream outputStream;\r\n\r\n\t\tpublic FileStreamProcessor(File file) throws FileNotFoundException {\r\n\t\t\toutputStream = new FileOutputStream(file);\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic void process(String block) {\r\n\t\t\ttry {\r\n\t\t\t\toutputStream.write(block.getBytes());\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onProcessed() {\r\n\t\t\ttry {\r\n\t\t\t\toutputStream.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t...\r\n\t\r\n#### ... to java logging\r\n\t...\r\n\tLogger logger=...\r\n\t\r\n\tRuntimeConfig runtimeConfig = new RuntimeConfig();\r\n\truntimeConfig.setProcessOutput(new ProcessOutput(Processors.logTo(logger, Level.INFO),\r\n\t\t\tProcessors.logTo(logger, Level.SEVERE), Processors.named(\"[console>]\",Processors.logTo(logger, Level.FINE))));\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\t...\r\n\r\n#### ... to default java logging (the easy way)\t\r\n\t...\r\n\t\r\n\tLogger logger=...\r\n\t\r\n\tRuntimeConfig runtimeConfig = RuntimeConfig.getInstance(logger);\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\t...\r\n\r\n### Custom Version\r\n\r\n\t...\r\n\tint port = 12345;\r\n\tMongodProcess mongod = null;\r\n\tMongodConfig mongodConfig = new MongodConfig(new GenericVersion(\"2.0.7-rc1\"), port, Network.localhostIsIPv6());\r\n\r\n\tMongodStarter runtime = MongodStarter.getDefaultInstance();\r\n\r\n\ttry {\r\n\t\tMongodExecutable mongodExecutable = runtime.prepare(mongodConfig);\r\n\t\tmongod = mongodExecutable.start();\r\n\r\n\t\t...\r\n\t\t\r\n\t} finally {\r\n\t\tif (mongod != null)\r\n\t\t\tmongod.stop();\r\n\t}\r\n\t...\r\n### Main Versions\r\n\t...\r\n\tIVersion version=Version.V2_0_1;\r\n\t// uses latest supported 2.1.x Version\r\n\tversion=Version.Main.V2_1;\r\n\t// uses latest supported production version\r\n\tversion=Version.Main.PRODUCTION;\r\n\t// uses latest supported development version\r\n\tversion=Version.Main.DEVELOPMENT;\r\n\r\n\r\n### Use Free Server Port\r\n\r\n\tWarning: maybe not as stable, as expected.\r\n\r\n#### ... by hand\r\n\t...\r\n\tint port = Network.getFreeServerPort();\r\n\t...\r\n\t\r\n#### ... automagic\r\n\t...\r\n\tMongodProcess mongod = null;\r\n\tMongodConfig mongodConfig = new MongodConfig(Version.Main.V2_0);\r\n\r\n\tMongodStarter runtime = MongodStarter.getDefaultInstance();\r\n\r\n\ttry {\r\n\t\tMongodExecutable mongodExecutable = runtime.prepare(mongodConfig);\r\n\t\tmongod = mongodExecutable.start();\r\n\r\n\t\tMongo mongo = new Mongo(new ServerAddress(mongodConfig.net().getServerAddress(), mongodConfig.net().getPort()));\r\n\t}\r\n\t...\r\n\r\n### Command Line Post Processing\r\n\t...\r\n\tICommandLinePostProcessor postProcessort=...\r\n\t\r\n\tRuntimeConfig runtimeConfig = new RuntimeConfig();\r\n\truntimeConfig.setsetCommandLinePostProcessor(postProcessor);\r\n\t...\r\n\r\n\r\n\r\n\r\n","tagline":"","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}